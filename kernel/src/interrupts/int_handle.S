/* * bekOS is a basic OS for the Raspberry Pi * Copyright (C) 2023 Bekos Contributors * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <https://www.gnu.org/licenses/>. */// clang-format off#include "arch/a64/asm_defines.h"#include "arch/a64/kernel_entry.h".section ".text.vec".macro complain_unknown_interrupt num    mov     x0, #\num    mrs     x1, esr_el1    mrs     x2, elr_el1    mrs     x3, spsr_el1    mrs     x4, far_el1    // Do a dodgy fake stack frame! TODO: NO NO NO    stp     x29, x2, [sp,#-16]!    mov     x29, sp    b unknown_int_handler1:  wfe    b 1b.endm.macro handle_basic_interrupt    store_regs    // Arguments    mrs	x0, esr_el1    mrs	x1, elr_el1    bl handle_hardware_interrupt    restore_regs    eret.endm.macro handle_sync_exception    store_regs    // Check if syscall    mrs x24, ESR_EL1    lsr w25, w24, #26   // ESR [31:26] - Exception Class    cmp w25, #21        // 0b010101 - Syscall    b.ne 2f    // Is a syscall    inline_enable_interrupts    mov x0, sp    bl handle_syscall_a64   // void handle_syscall_a64(InterruptContext&) - sets x0 if appropriate itself.    inline_disable_interrupts    restore_regs    eret    // Not a syscall2:  complain_unknown_interrupt 8.endm.macro vector_entry branchlabel.align 7b \branchlabel.endm// VBAR has reserved 0 bottom 11 bits.align 11.globl irq_vectorsirq_vectors:    vector_entry el1_s0_sync    vector_entry el1_s0_irq    vector_entry el1_s0_fiq    vector_entry el1_s0_err    vector_entry el1_s1_sync    vector_entry el1_s1_irq    vector_entry el1_s1_fiq    vector_entry el1_s1_err    vector_entry el0_64_sync    vector_entry el0_64_irq    vector_entry el0_64_fiq    vector_entry el0_64_err    vector_entry el0_32_sync    vector_entry el0_32_irq    vector_entry el0_32_fiq    vector_entry el0_32_errel1_s0_sync:    complain_unknown_interrupt 0el1_s0_irq:    complain_unknown_interrupt 1el1_s0_fiq:    complain_unknown_interrupt 2el1_s0_err:    complain_unknown_interrupt 3el1_s1_sync:    complain_unknown_interrupt 4el1_s1_irq:    // complain_unknown_interrupt 5    handle_basic_interruptel1_s1_fiq:    complain_unknown_interrupt 6el1_s1_err:    complain_unknown_interrupt 7el0_64_sync:    handle_sync_exception    //complain_unknown_interrupt 8el0_64_irq:    handle_basic_interrupt    //complain_unknown_interrupt 9el0_64_fiq:    complain_unknown_interrupt 10el0_64_err:    complain_unknown_interrupt 11el0_32_sync:    complain_unknown_interrupt 12el0_32_irq:    complain_unknown_interrupt 13el0_32_fiq:    complain_unknown_interrupt 14el0_32_err:    complain_unknown_interrupt 15